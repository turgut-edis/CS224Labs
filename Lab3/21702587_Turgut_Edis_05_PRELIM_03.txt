CS224
Lab 3
Section 5
Turgut Alp Edis
21702587

#Lab 3 - Part 1 Non recursive instruction counter
#instCnt - Counts the instructions of add and lw

.data
bye: .asciiz "\nGoodbye!!"
addcntt: .asciiz "\nThe count add in main is "
addcnts: .asciiz "\nThe count add in subprogram is "
lwcntt: .asciiz "\nThe count lw in main is "
lwcnts: .asciiz "\nThe count lw in subprogram is "

.text

main:
	L1:
		la $a0, L1
		la $a1, L2
		
		jal instCnt
		move $s0, $v0 #lw
		move $s1, $v1 #add
		
		add $s4, $s4, $0
		add $s3, $0, $s3
		
		la $a0, addcntt
		li $v0, 4
		syscall
		
		la $a0, ($s1)
		li $v0, 1
		syscall
		
		la $a0, lwcntt
		li $v0, 4
		syscall
		
		la $a0, ($s0)
		li $v0, 1
		syscall
		
		la $a0, start
		la $a1, end
		
		jal instCnt
		add $s0, $v0, $0
		move $s1, $v1
		
		la $a0, addcnts
		li $v0, 4
		syscall
		
		la $a0, ($s1)
		li $v0, 1
		syscall
		
		la $a0, lwcnts
		li $v0, 4
		syscall
		
		la $a0, ($s0)
		li $v0, 1
		syscall
		
		add $s7, $0, $s7
		add $s6, $s6, $0
	
		la $a0, bye
		li $v0, 4
		syscall
		
		add $s5, $s5, $0
	L2:
		li $v0, 10
		syscall
#v0, lw count
#v1, add count	
instCnt:
	start:
	addi $sp, $sp, -28
	sw $s0, 24($sp)
	sw $s1, 20($sp)
	sw $s2, 16($sp)
	sw $s3, 12($sp)
	sw $s4, 8($sp)
	sw $s5, 4($sp)
	sw $s6, 0($sp)
	
	la $s0, ($a0)
	la $s1, ($a1)
	addi $s2, $0, 0 #lw count
	addi $s3, $0, 0 #add count
	
	cntLoop:
		beq $s0, $s1, endCount
		lw $s6, ($s0)
		sll $s4, $s6, 26
		srl $s4, $s4, 26 #take function code
		srl $s5, $s6, 26 #take opcode
		
		beq $s4, 32, countadd
		beq $s5, 35, countlw
		
		addi $s0, $s0, 4
		j cntLoop
		
		countlw:
			addi $s2, $s2, 1
			addi $s0, $s0, 4
			j cntLoop
		countadd:
			addi $s3, $s3, 1
			addi $s0, $s0, 4
			j cntLoop
	endCount:
		move $v0, $s2 #lw count
		move $v1, $s3 #add count
		sw $s6, 0($sp)
		sw $s5, 4($sp)
		sw $s4, 8($sp)
		sw $s3, 12($sp)
		sw $s2, 16($sp)
		sw $s1, 20($sp)
		sw $s0, 24($sp)
		addi $sp, $sp, 28
	end:
		jr $ra

# Lab 3 - Part 2 Recursive Division
# divRec - Recursive subprogram that dividing recursively

.data
cont: .asciiz "\nDo you wanna continue (1 yes, 0 no): "
divid: .asciiz "Please enter divided number: "
divid1: .asciiz "Please enter divider number: "
conc: .asciiz "The division of "
conc1: .asciiz " by "
conc2: .asciiz " is "
goodbyemes: .asciiz "Goodbye!!"

.text
main:
	addi $s0, $0, 1 	#s0 is determinant of continuation
	contloop:
		beq $s0, $0, end #If user do not want to continue, the program ends
		
		la $a0, divid
		li $v0, 4
		syscall
		li $v0, 5
		syscall
		move $s1, $v0
		
		la $a0, divid1
		li $v0, 4
		syscall
		li $v0, 5
		syscall
		move $s2, $v0
		
		move $a0, $s1
		move $a1, $s2
		jal divRec		
		move $s3, $v0
		
		la $a0, conc
		li $v0, 4
		syscall
		
		la $a0, ($s1)
		li $v0, 1
		syscall
		
		la $a0, conc1
		li $v0, 4
		syscall
		
		la $a0, ($s2)
		li $v0, 1
		syscall
		
		la $a0, conc2
		li $v0, 4
		syscall
		
		la $a0, ($s3)
		li $v0, 1
		syscall
		
		
		la $a0, cont
		li $v0, 4
		syscall
		li $v0, 5
		syscall
		move $s0, $v0
		j contloop
	end:
		la $a0, goodbyemes
		li $v0, 4
		syscall
		li $v0, 10
		syscall
#a0, divided num
#a1, divider num
#v0, result
divRec:
	addi $sp, $sp, -20
	sw $s1, 16($sp)
	sw $s2, 12($sp)
	sw $a0, 8($sp)
	sw $a1, 4($sp)
	sw $ra, 0($sp)
	sge $s1, $a0 , $a1	#if a0 > a1, continue
	bne $s1, $0, conti
	addi $v0, $0, 0		#else, return 0
	addi $sp, $sp, 20	#fill stack
	jr $ra
conti:
	sub $a0, $a0, $a1	# a0 = a0 - a1
	jal subRec		#recursive call
	
	lw $s1, 16($sp)
	lw $s2, 12($sp)
	lw $a0, 8($sp)
	lw $a1, 4($sp)
	addi $v0, $v0, 1	#add recursively
	lw $ra, 0($sp)
	addi $sp, $sp, 20
	jr $ra			#return
