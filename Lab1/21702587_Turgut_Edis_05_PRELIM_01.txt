CS224
Lab 1
Section 5
Turgut Alp Edis
21702587

Part 1.
## isSymmetric.asm - Prints the elements of the array and prints whether it is symmetric ot not.

#		text segment		#

	.text		
	.globl __start 

__start:		# execution starts here
	la $s0, array	#s0 holds the array
	la $t2, arrsize #t2 hold the arraysize
	#t0 holds the value for number of elements in array
	sll $t0, $0, 2
	add $t0, $t0, $t2
	lw $t0, 0($t0) 
	addi $s1, $0, 0	#s1 is i using in for loop of printLoop
	addi $s2, $0, 0 #s2 is j using in begin to end search of array
	add $s3, $t0, -1  #s3 is k using in end to begin search of array
	
	printLoop:	# loop for print the array elements
		beq $s1, $t0, beginToEnd #If all elements are printed, jump to next loop
		sll $t1, $s1, 2 	 #Creates byte offset to access the elements of array
		add $t1, $t1, $s0	 #Address of array[i]
		lw $t1, 0($t1)		 # t1 = array[i]
		#Print the array[i]
		la $a0, ($t1)
		li $v0, 1
		syscall
		#Print the space between elements
		la $a0, str
		li $v0,4
		syscall
		addi $s1, $s1, 1	# i = i + 1
		j printLoop		# Jump to the beginning of the array
		
	
	beginToEnd:	# Loop for linear search in array
		beq $s2, $t0, done	#If all elements are investigated and no problem, go to the end
		sll $t3, $s2, 2		#Byte offset to access the elements
		add $t3, $t3, $s0	#Address of array[j]
		lw $t3, 0($t3)		# t3 = array[j]
		endToBegin:	# Loop for reverse linear search in array
			beq $s3, $s2, done 	#If begin search index equals to reverse search index, they are symmetric
			sll $t4, $s3, 2		#Byte offset to access reversal array
			add $t4, $t4, $s0	#Address of array[k]
			lw $t4, 0($t4)		# t4 = array[k]
			bne $t3, $t4, printNotSym # If end and begin index is not equal, end all loops, print it is not symmetric and exit
			addi $s2, $s2, 1	# j = j + 1
			addi $s3, $s3, -1	# k = k + 1
			j beginToEnd		# jump to the beginning of begin to end search
	done:	
		#System call to print the array is symmetric
		la $a0, isSym
		li $v0, 4
		syscall
		li $v0, 10  # system call to exit
		syscall
	
	printNotSym:
		#System call to print the array is not symmetric
		la $a0, isNotSym
		li $v0, 4
		syscall
		li $v0, 10  # system call to exit
		syscall

#     	 data segment		#

	.data
str:	.asciiz " "
isNotSym:	.asciiz "\nArray is not symmetric"
isSym:	.asciiz "\nArray is symmetric"
array:	.word	2, 5, 4
arrsize: .word 3

##
## end of file isSymmetric.asm

Part 2.
## ArithmeticCalc.asm - Calculates the following expression
## x = a * (b - c) % d

#		text segment		#

	.text		
	.globl __start	

__start:
	#s0 = result
	addi $s0, $0, 0
	#Print prompt for program and calls system
	la $a0, prompt
	li $v0, 4
	syscall
	#New line
	la $a0, end
	li $v0, 4
	syscall
	#Takes the input a and store in s1
	la $a0, valueIna
	li $v0, 4
	syscall
	li $v0, 5
	syscall
	la $s1, ($v0)
	#Takes the input b and store in s2
	la $a0, valueInb
	li $v0, 4
	syscall
	li $v0, 5
	syscall
	la $s2, ($v0) 
	#Takes the input c and store in s3
	la $a0, valueInc
	li $v0, 4
	syscall
	li $v0, 5
	syscall
	la $s3, ($v0) 
	#Takes the input d and store in s4
	la $a0, valueInd
	li $v0, 4
	syscall
	li $v0, 5
	syscall
	la $s4, ($v0)   
	#s0 = x, s1 = a, s2 = b, s3 = c, s4 = d
	
	sub $t0, $s2, $s3
	mul $t1, $s1, $t0
	div $s0, $t1, $s4 
	
	mfhi $s0
	
	la $a0, answer
	li $v0, 4
	syscall 
	la $a0,($s0)	# output prompt message on terminal
	li $v0,1	# syscall 4 prints the string
	syscall
	la $a0, end
	li $v0, 4
	syscall

	
	li $v0,10	# system call to exit
	syscall		


#     	 data segment		#

	.data
prompt:	.asciiz "x = a * (b-c) % d"
valueIna: .asciiz "Please enter value for a: "
valueInb: .asciiz "Please enter value for b: "
valueInc: .asciiz "Please enter value for c: "
valueInd: .asciiz "Please enter value for d: "
answer:	.asciiz "The result for the expression is "
end:	.asciiz "\n"

##
## end of file ArithmeticCalc.asm